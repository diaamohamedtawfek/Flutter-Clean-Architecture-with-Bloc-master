// Mocks generated by Mockito 5.0.7 from annotations
// in clean_architecture_sample_code/test/domain/usecases/get_sample_data_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:clean_architecture_sample_code/core/error/failures.dart' as _i5;
import 'package:clean_architecture_sample_code/domain/entities/sample_entity.dart'
    as _i6;
import 'package:clean_architecture_sample_code/domain/repositories/sample_data_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SampleDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSampleDataRepository extends _i1.Mock
    implements _i3.SampleDataRepository {
  MockSampleDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.SampleEntity>> getSampleData(
          {dynamic id, dynamic name}) =>
      (super.noSuchMethod(
          Invocation.method(#getSampleData, [], {#id: id, #name: name}),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.SampleEntity>>.value(
              _FakeEither<_i5.Failure, _i6.SampleEntity>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.SampleEntity>>);
}
